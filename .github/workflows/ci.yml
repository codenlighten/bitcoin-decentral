name: Bitcoin Decentral CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04, macos-12, windows-2022]
        include:
          - os: ubuntu-22.04
            compiler: gcc
          - os: ubuntu-20.04
            compiler: gcc
          - os: macos-12
            compiler: clang
          - os: windows-2022
            compiler: msvc

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          pkg-config \
          libboost-all-dev \
          libssl-dev \
          libevent-dev \
          libdb-dev \
          libdb++-dev \
          libsqlite3-dev \
          libzmq3-dev \
          libminiupnpc-dev \
          libnatpmp-dev \
          qtbase5-dev \
          qttools5-dev \
          qttools5-dev-tools

    - name: Install dependencies (macOS)
      if: matrix.os == 'macos-12'
      run: |
        brew install \
          cmake \
          boost \
          openssl \
          libevent \
          berkeley-db@4 \
          zeromq \
          miniupnpc \
          libnatpmp \
          qt@5

    - name: Setup CMake (Windows)
      if: matrix.os == 'windows-2022'
      uses: jwlawson/actions-setup-cmake@v2
      with:
        cmake-version: '3.27.9'

    - name: Install Ninja (Windows)
      if: matrix.os == 'windows-2022'
      uses: seanmiddleditch/gha-setup-ninja@v4

    - name: Install dependencies (Windows)
      if: matrix.os == 'windows-2022'
      run: |
        vcpkg install boost-system boost-filesystem boost-thread boost-chrono openssl libevent zeromq

    - name: Configure CMake (Unix)
      if: runner.os != 'Windows'
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=Release \
          -DBUILD_TESTS=ON \
          -DWITH_GUI=OFF

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: |
        cmake -B build -S . -G "Ninja" `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_TESTS=ON `
          -DWITH_GUI=OFF `
          -DWITH_BDB=OFF `
          -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake

    - name: Build
      run: cmake --build build --config Release -j 4

    - name: Run unit tests
      run: |
        cd build
        ctest --output-on-failure --parallel

    - name: Run functional tests (Unix only)
      if: runner.os != 'Windows'
      run: |
        cd build
        python3 ../test/functional/test_runner.py

  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install linting tools
      run: |
        pip install flake8 black isort
        sudo apt-get update
        sudo apt-get install -y clang-format cppcheck

    - name: Check Python code style
      run: |
        find . -name "*.py" | xargs flake8 --max-line-length=120
        find . -name "*.py" | xargs black --check --line-length=120
        find . -name "*.py" | xargs isort --check-only

    - name: Check C++ code style
      run: |
        find src -name "*.cpp" -o -name "*.h" | xargs clang-format --dry-run --Werror

    - name: Run static analysis
      run: |
        if [ -d "src" ] && [ "$(find src -name "*.cpp" | wc -l)" -gt 0 ]; then
          cppcheck --enable=all --error-exitcode=1 --suppress=missingIncludeSystem src/
        else
          echo "No C++ source files found, skipping cppcheck"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  documentation:
    name: Documentation Build
    runs-on: ubuntu-22.04

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install documentation tools
      run: |
        pip install sphinx sphinx-rtd-theme
        sudo apt-get update
        sudo apt-get install -y doxygen graphviz

    - name: Build documentation
      run: |
        # For now, just validate markdown files
        find . -name "*.md" -exec echo "Validating {}" \;
        # Future: Build Doxygen docs when source code is available
        echo "Documentation validation complete"

    - name: Check for broken links
      run: |
        # Simple check for obvious broken internal links
        grep -r "\[.*\](.*\.md)" . || true
        echo "Link validation complete"
